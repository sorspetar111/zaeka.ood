Zaeka Ltd. <zaeka.ood@gmail.com>


Здравейте,

Благодаря за поканата и за детайлното задание. Успешно се запознах с изискванията за уеб базираното приложение („Система“) и потвърждавам, че разбирам напълно функционалностите, които трябва да бъдат реализирани.

По-долу представям моята оценка за времето за реализация, както и план за изпълнението на проекта, съобразен с посочените от вас технологии: C# с .NET 8, EF Core и Native AOT за API и React (JSX) за фронтенд.

Оценка на Времето за Реализация

Представям разбивка на очакваното време по основни модули. Оценката е в работни часове и предполага, че всички изисквания са ясни и няма да има съществени промени по заданието в хода на работа.

Модул / Функционалност	Backend (API) - Часове	Frontend (React) - Часове	Общо - Часове
1. Основи на проекта			
Настройка на средата, структура на проекта (API & React)	8	6	14
Дизайн на база данни (EF Core) и миграции	6	-	6
2. Автентикация и Потребители			
Регистрация, Вписване (Login), JWT Token генериране	10	8	18
Форма за Забравена/Смяна на парола	6	5	11
3. Потребителски интерфейс (Крайни потребители)			
Визуализация на Региони, Секции и Контроли	6	10	16
Функционалност при натискане на "Контрола" (цвят, номер)	2	4	6
Webhook / API извикване при натискане	4	1	5
4. Административен панел			
Управление на потребители (списък, редакция, роли)	10	12	22
Управление на контроли (списък, редакция, асоциации)	8	10	18
Създаване на Региони, Секции, Контроли	6	8	14
5. Общи функционалности			
Логика за "Power Admin" и управление на администратори	5	2	7
Система за събития ("Списък Събития")	8	6	14
Интернационализация (BG/EN)	3	8	11
Навигация (бутони "Назад" и "Изход")	1	4	5
6. Тестване и завършване			
Интеграционно тестване и отстраняване на грешки	8	8	16
Подготовка за демонстрация и deployment	4	2	6
ОБЩО (приблизително)	95 часа	94 часа	189 часа

Обща прогноза за реализация: 20 - 25 работни дни (при стандартен 8-часов работен ден).

План за Реализация

Проектът ще бъде разделен на две основни части: Backend и Frontend, които ще се разработват паралелно.

Backend (C# / .NET 8 API с EF Core)

Структура на проекта:

Ще използвам Clean Architecture или подобен подход за разделяне на логиката (Domain, Application, Infrastructure, API).

Ще бъде създаден ASP.NET Core Web API проект, конфигуриран за .NET 8 и Native AOT, ако е приложимо за целевата хостинг среда, с цел максимална производителност.

База данни и EF Core:

Ще дефинирам следните основни модели (Entities):

User (Id, UserName, Email, PasswordHash, Role)

Region (Id, Name)

Section (Id, Name, RegionId)

Control (Id, Name, SectionId)

UserControlPermission (UserId, ControlId) - релационна таблица за права

EventLog (Id, Timestamp, UserId, EventType, Details)

Ще използвам EF Core Code-First подхода за генериране и управление на схемата на базата данни чрез миграции.

API Endpoints (RESTful):

Authentication: POST /api/auth/register, POST /api/auth/login, POST /api/auth/forgot-password

Users: GET /api/users, GET /api/users/{id}, PUT /api/users/{id} (за промени, асоциации, роли)

Controls: GET /api/controls, PUT /api/controls/{id}, POST /api/controls/create (общ ендпойнт за създаване на Region, Section, Control)

Dashboard: GET /api/dashboard/controls (връща контролите за текущия потребител)

Events: POST /api/events/control-press, GET /api/events (за администраторския лог)

Сигурност:

Автентикацията ще бъде реализирана чрез JWT (JSON Web Tokens).

Достъпът до различните endpoints ще бъде ограничен чрез роли ([Authorize(Roles = "Administrator")]), за да се гарантира, че само оторизирани потребители могат да извършват съответните действия.

Frontend (React JSX)

Структура на проекта:

Ще използвам create-react-app или Vite за бърза настройка на проекта.

Компонентната архитектура ще бъде атомарна и преизползваема:

Pages: LandingPage, LoginPage, RegisterPage, DashboardPage, AdminUsersPage, AdminControlsPage и др.

Components: Button, Input, Control, Region, UserList, LanguageSwitcher, Navbar и др.

Управление на състоянието (State Management):

За глобалното състояние (като информация за логнат потребител, избран език) ще използвам React Context API.

За локалното състояние в компонентите ще се използва useState и useEffect.

Интернационализация (i18n):

Ще интегрирам библиотека като i18next с react-i18next. Това ще позволи смяната на езика (BG/EN) динамично, без презареждане на страницата, като текстовете ще се зареждат от JSON файлове.

Комуникация с API:

Ще използвам axios или вградения fetch API за асинхронни заявки към Backend-a. Ще създам централизиран сервиз за API извикванията, който автоматично ще добавя JWT токена към хедърите на заявките.

Стилизиране:

За бърза и консистентна разработка на интерфейса ще използвам UI библиотека като Material-UI (MUI) или Tailwind CSS.

Демонстрация

След завършване на разработката, мога да демонстрирам приложението по един от следните начини:

Споделяне на достъп до работещо приложение, хоствано на моя тестова среда (например на Azure, Heroku или друг облачен доставчик).

Демонстрация на живо чрез споделяне на екран, по време на която ще премина през всички функционалности.

Предоставяне на Docker контейнери с приложението (API и Frontend), които могат лесно да бъдат стартирани на всяка машина с Docker.

Въпроси

За да бъде оценката и изпълнението максимално точни, имам няколко уточняващи въпроса:

Webhook: Какъв е очакваният формат (payload) на Webhook-а, който се изпраща при натискане на "Контрола"? Трябва ли да се конфигурира URL адресът на Webhook-а някъде в администрацията или е константен?

UI/UX Дизайн: Има ли изготвени прототипи (mockups) или дизайн система, която трябва да се следва, или мога да използвам стандартни компоненти от UI библиотека (напр. Material-UI)?

Power Admin Акаунти: Данните за двата "Power Admin" акаунта (потребителско име, парола) трябва ли да бъдат предварително заложени в системата (hardcoded/seeded) при първоначално стартиране?

Потвърждавам, че съм наясно с условията, посочени в забележките, включително и че всички ресурси по реализацията на заданието са за моя сметка.

Готов съм да отговоря на всякакви допълнителни въпроси и очаквам с нетърпение възможността да обсъдим потенциалните бъдещи взаимоотношения след успешната демонстрация.

С уважение,
Петър

